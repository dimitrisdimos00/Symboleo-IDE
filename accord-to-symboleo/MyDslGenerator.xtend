/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.ArrayList
import org.xtext.example.mydsl.myDsl.Model
import org.xtext.example.mydsl.myDsl.Variable
import org.xtext.example.mydsl.myDsl.Entity
import org.eclipse.emf.common.util.EList
import org.xtext.example.mydsl.myDsl.PrimitiveVariable
import org.xtext.example.mydsl.myDsl.EnumMember
import org.xtext.example.mydsl.myDsl.EnumEntity
import org.xtext.example.mydsl.myDsl.AdvancedVariable
import org.xtext.example.mydsl.myDsl.BaseEntity

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
	ArrayList <BaseEntity> entities = new ArrayList();
	String domainName;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for(e : resource.allContents.toIterable.filter(Model)) {
			parse(e);
			
			generateFile(fsa);
		}
	}
	
	def parse(Model model) {
		this.domainName = model.domainName;
		
		entities.addAll(model.entities);
	}
	
	def generateArticle(String name) {
		var vowels = "aeiou";
		
		for(var i = 0; i < 5; i++) {
			if(name.charAt(0) == vowels.charAt(i)) {
				return "isAn";
			}
		}
		
		return "isA";
	}
	
	def convertToSymboleoOntology(String name) {
		switch(name) {
			case "asset":
				return "Asset"
			
			case "transaction":
				return "Event"
			
			case "enum":
				return "Enum"
		}
	}
	
	def getVariableType(Variable variable) {
		if (variable instanceof PrimitiveVariable) {
			return (variable as PrimitiveVariable).type.name
		} else {
			return (variable as AdvancedVariable).type.name
		}
	}
	
	def generateEntityContents(Entity entity)'''
		with «FOR variable : entity.variables SEPARATOR ', '»«variable.name»: «getVariableType(variable)»«ENDFOR»
	'''
	
	def generateEntityContents(EnumEntity entity)'''
		(«FOR variable : entity.variables SEPARATOR ', '»«variable.name»«ENDFOR»)
	'''
	
	def generateEntity(BaseEntity entity) {
		if (entity instanceof EnumEntity) {
			return '''
				«entity.name» «generateArticle('enum')» Enum«generateEntityContents(entity as EnumEntity)»
			'''
		} else {
			var entityCasted = entity as Entity
			
			return '''
				«entity.name» «generateArticle(entityCasted.type.name)» «convertToSymboleoOntology(entityCasted.type.name)» «generateEntityContents(entityCasted)»
			'''
		}
	}
	
	def generateText()'''
		Domain contract
		«FOR entity : this.entities»
			«generateEntity(entity)»
		«ENDFOR»
	'''
	
	def generateFile(IFileSystemAccess2 fsa) {
		fsa.generateFile('./' + this.domainName + '.txt', generateText())
	}
}
